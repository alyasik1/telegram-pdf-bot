import os
import aiofiles
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from PyPDF2 import PdfReader

# –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = "/app/uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)


# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF", callback_data="send_pdf")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)


# üìå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *PDF ‚Üí TXT –±–æ—Ç*.\n\n"
        "üìå –Ø –º–æ–≥—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
        parse_mode="Markdown"
    )


# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "send_pdf":
        await query.edit_message_text(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª (–¥–æ *200 –ú–ë*), –∏ —è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç."
        )
    elif query.data == "help":
        await query.edit_message_text(
            "‚ÑπÔ∏è *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF¬ª\n"
            "2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –¥–æ 200 –ú–ë\n"
            "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª `.txt`\n\n"
            "üëâ –û—á–µ–Ω—å —É–¥–æ–±–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            parse_mode="Markdown",
            reply_markup=main_menu()
        )


# üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not file.file_name.endswith(".pdf"):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ *PDF* —Ñ–∞–π–ª.", parse_mode="Markdown")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    if file.file_size > 200 * 1024 * 1024:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º *200 –ú–ë*.", parse_mode="Markdown")
        return

    await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
    new_file = await context.bot.get_file(file.file_id)
    file_path = os.path.join(UPLOAD_DIR, file.file_name)

    async with aiofiles.open(file_path, "wb") as f:
        await new_file.download_to_memory(out=f)

    await update.message.reply_text("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ —Ç–µ–∫—Å—Ç...")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    try:
        text_file_path = file_path.replace(".pdf", ".txt")

        reader = PdfReader(file_path)
        extracted_text = []

        for page in reader.pages:
            extracted_text.append(page.extract_text() or "")

        async with aiofiles.open(text_file_path, "w", encoding="utf-8") as f:
            await f.write("\n".join(extracted_text))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        async with aiofiles.open(text_file_path, "rb") as f:
            await update.message.reply_document(
                document=InputFile(f, filename=os.path.basename(text_file_path)),
                caption="‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç:"
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")

    finally:
        # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.remove(file_path)
            os.remove(text_file_path)
        except Exception:
            pass


# üìå –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    app.run_polling()


if __name__ == "__main__":
    main()
