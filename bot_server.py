import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from pdf_to_text import convert_pdf_to_txt

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF", callback_data="convert")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF –≤ —Ç–µ–∫—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "convert":
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    elif query.data == "help":
        await query.edit_message_text("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª, –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    file_id = doc.file_id
    file_name = doc.file_name
    file_size = doc.file_size

    file_path = os.path.join(UPLOAD_FOLDER, file_name)
    file = await context.bot.get_file(file_id)
    await file.download_to_drive(file_path)

    # –û—Ç–≤–µ—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É
    await update.message.reply_text(f"–§–∞–π–ª {file_name} –ø—Ä–∏–Ω—è—Ç. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...")

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    asyncio.create_task(convert_and_send(file_path, update, context))

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
async def convert_and_send(file_path: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        output_txt = os.path.splitext(file_path)[0] + ".txt"
        convert_pdf_to_txt(file_path, output_txt)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if os.path.getsize(output_txt) <= 50 * 1024 * 1024:
            await context.bot.send_document(chat_id=update.effective_chat.id, document=open(output_txt, "rb"))
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (FastAPI)
            file_url = f"{os.getenv('DOMAIN', 'http://localhost:8000')}/files/{os.path.basename(output_txt)}"
            await update.message.reply_text(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (>50–ú–ë).\n–°–∫–∞—á–∞–π—Ç–µ –∑–¥–µ—Å—å: {file_url}")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")

# FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()

@app.get("/files/{filename}")
async def get_file(filename: str):
    file_path = os.path.join(UPLOAD_FOLDER, filename)
    if os.path.exists(file_path):
        return FileResponse(file_path, filename=filename)
    return {"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    if not TELEGRAM_TOKEN:
        print("[ERROR] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_TOKEN")
        return

    tg_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    tg_app.add_handler(CommandHandler("start", start))
    tg_app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
    tg_app.add_handler(MessageHandler(filters.Regex("convert|help"), button_handler))

    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –∏ FastAPI –≤–º–µ—Å—Ç–µ
    import uvicorn
    asyncio.create_task(uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000))))
    tg_app.run_polling()

if __name__ == "__main__":
    main()
