import os
elif query.data == 'convert':
await query.edit_message_text('üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç.')
elif query.data == 'ocr':
await query.edit_message_text('üîç OCR –≤—ã–±—Ä–∞–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ PDF.')


async def pdf_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
file = update.message.document
if not file:
await update.message.reply_text('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')
return


if file.file_size > 200 * 1024 * 1024:
await update.message.reply_text('‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 200 –ú–ë).')
return


await update.message.reply_text('üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...')
file_obj = await context.bot.get_file(file.file_id)
file_bytes = BytesIO()
await file_obj.download_to_memory(out=file_bytes)
file_bytes.seek(0)


await update.message.reply_text('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ —Ç–µ–∫—Å—Ç...')
try:
reader = PdfReader(file_bytes)
text_content = '\n'.join(page.extract_text() or '' for page in reader.pages)
if not text_content.strip():
text_content = '–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.'


await update.message.reply_text('‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–µ–∫—Å—Ç:')
for i in range(0, len(text_content), 4000): # Telegram –ª–∏–º–∏—Ç 4096
await update.message.reply_text(text_content[i:i+4000])


except Exception as e:
logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}')


# Handlers
telegram_app.add_handler(CommandHandler('start', start))
telegram_app.add_handler(CallbackQueryHandler(handle_button))
telegram_app.add_handler(MessageHandler(filters.Document.PDF, pdf_handler))


# FastAPI webhook route
@app.post('/webhook')
async def webhook(request: Request):
try:
update = Update.de_json(await request.json(), telegram_app.bot)
await telegram_app.update_queue.put(update)
return {'status': 'ok'}
except Exception as e:
logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
return {'status': 'error', 'error': str(e)}


@app.on_event("startup")
async def on_startup():
logger.info("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook...")
await telegram_app.bot.set_webhook(WEBHOOK_URL)


@app.on_event("shutdown")
async def on_shutdown():
await telegram_app.stop()