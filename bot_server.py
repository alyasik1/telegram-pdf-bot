import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from contextlib import asynccontextmanager

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.up.railway.app

if not BOT_TOKEN or not WEBHOOK_URL:
    raise RuntimeError("‚ùå BOT_TOKEN –∏ WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ Railway Variables")

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
telegram_app = Application.builder().token(BOT_TOKEN).build()

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF, –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc.file_name.endswith(".pdf"):
        await update.message.reply_text("‚ùå –ü—Ä–∏—à–ª–∏ –∏–º–µ–Ω–Ω–æ PDF-—Ñ–∞–π–ª.")
        return

    await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

    file = await doc.get_file()
    file_path = f"/tmp/{doc.file_name}"
    await file.download_to_drive(file_path)

    await update.message.reply_text("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! (–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)")

# --- –†–æ—É—Ç–∏–Ω–≥ –¥–ª—è Telegram Webhook ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook...")
    await telegram_app.bot.set_webhook(WEBHOOK_URL + "/webhook")
    yield
    logger.info("üõë –£–¥–∞–ª—è—é webhook...")
    await telegram_app.bot.delete_webhook()

app = FastAPI(lifespan=lifespan)

@app.post("/webhook")
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return JSONResponse(content={"ok": False}, status_code=500)
    return JSONResponse(content={"ok": True})

@app.get("/")
async def root():
    return {"status": "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Document.PDF, handle_document))
