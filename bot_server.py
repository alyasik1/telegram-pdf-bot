import os
import logging
import asyncio
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.ext import MessageHandler, filters

from dotenv import load_dotenv
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

app = FastAPI()
telegram_app = Application.builder().token(BOT_TOKEN).build()

MAX_FILE_SIZE = 200 * 1024 * 1024  # 200 MB

# ----------- Helper Functions -----------
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å TXT", callback_data="download_txt")],
        [InlineKeyboardButton("üìù OCR (—Å–∫–∞–Ω)", callback_data="ocr")],
        [InlineKeyboardButton("‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç—å PDF", callback_data="split_pdf")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø PDF-–±–æ—Ç. –ó–∞–≥—Ä—É–∑–∏ PDF, –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.",
        reply_markup=main_menu_keyboard()
    )

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document:
        return

    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 200 –ú–ë.")
        return

    await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    file = await document.get_file()
    file_path = f"./{document.file_name}"
    await file.download_to_drive(file_path)

    await update.message.reply_text("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ —Ç–µ–∫—Å—Ç...")

    try:
        from pdfminer.high_level import extract_text
        text = extract_text(file_path)
        if not text.strip():
            text = "‚ö†Ô∏è PDF –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}"

    text_file_path = file_path.replace(".pdf", ".txt")
    with open(text_file_path, "w", encoding="utf-8") as f:
        f.write(text)

    await update.message.reply_text("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}\n‚ö†Ô∏è –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# ----------- Telegram Handlers -----------
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
telegram_app.add_handler(CallbackQueryHandler(button_handler))

# ----------- FastAPI Webhook -----------
@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook...")
    await telegram_app.bot.set_webhook(WEBHOOK_URL)

@app.post("/webhook")
async def telegram_webhook(req: Request):
    try:
        update = Update.de_json(await req.json(), telegram_app.bot)
        await telegram_app.update_queue.put(update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return {"ok": False}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
