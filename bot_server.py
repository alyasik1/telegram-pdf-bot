import os
import logging
import tempfile
import asyncio

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

from pdfminer.high_level import extract_text
from PyPDF2 import PdfReader

# --- –õ–û–ì–ò ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- TELEGRAM TOKEN ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.up.railway.app/webhook

# --- FASTAPI ---
app = FastAPI()

# --- TELEGRAM APP ---
telegram_app = Application.builder().token(BOT_TOKEN).build()


# --- –ö–ù–û–ü–ö–ò ---
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF ‚Üí TXT", callback_data="convert_txt")],
        [InlineKeyboardButton("üîç OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç)", callback_data="convert_ocr")],
        [InlineKeyboardButton("‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç—å PDF", callback_data="split_pdf")],
    ]
    return InlineKeyboardMarkup(keyboard)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def start(update: Update, context):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å PDF.\n\n"
        "–ó–∞–≥—Ä—É–∑–∏ PDF –∏ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu()
    )


async def handle_file(update: Update, context):
    file = await update.message.document.get_file()
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        await file.download_to_drive(custom_path=tmp.name)
        context.user_data["pdf_path"] = tmp.name

    await update.message.reply_text(
        "üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )


async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()

    pdf_path = context.user_data.get("pdf_path")
    if not pdf_path:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ PDF-—Ñ–∞–π–ª.")
        return

    if query.data == "convert_txt":
        await query.edit_message_text("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ —Ç–µ–∫—Å—Ç...")
        text = extract_text(pdf_path)
        if not text.strip():
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç (–ø–æ–ø—Ä–æ–±—É–π OCR).")
        else:
            if len(text) > 4000:
                text = text[:4000] + "\n\n... ‚úÇÔ∏è –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω."
            await query.edit_message_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–µ–∫—Å—Ç:\n\n" + text)

    elif query.data == "convert_ocr":
        await query.edit_message_text("üîç OCR –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω (Tesseract –Ω—É–∂–µ–Ω).")

    elif query.data == "split_pdf":
        reader = PdfReader(pdf_path)
        pages = len(reader.pages)
        await query.edit_message_text(f"üìë –í —Ñ–∞–π–ª–µ {pages} —Å—Ç—Ä–∞–Ω–∏—Ü. –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


# --- FASTAPI ROUTES ---
@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return JSONResponse({"ok": True})


@app.on_event("startup")
async def on_startup():
    await telegram_app.bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(MessageHandler(filters.Document.PDF, handle_file))
    telegram_app.add_handler(CallbackQueryHandler(button_handler))


@app.get("/")
async def home():
    return {"status": "ok", "message": "PDF Bot is running üöÄ"}
