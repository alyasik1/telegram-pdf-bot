import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
)
from contextlib import asynccontextmanager
from pdfminer.high_level import extract_text
from PyPDF2 import PdfReader
from pdf2image import convert_from_path
import pytesseract
import asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.up.railway.app

if not BOT_TOKEN or not WEBHOOK_URL:
    raise RuntimeError("BOT_TOKEN –∏ WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã")

telegram_app = Application.builder().token(BOT_TOKEN).build()

# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF", callback_data="upload_pdf")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=reply_markup
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF ---
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc.file_name.endswith(".pdf"):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    file = await doc.get_file()
    file_path = f"/tmp/{doc.file_name}"
    await file.download_to_drive(file_path)

    keyboard = [
        [InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å TXT", callback_data=f"to_txt|{file_path}")],
        [InlineKeyboardButton("üîç OCR", callback_data=f"ocr|{file_path}")],
        [InlineKeyboardButton("‚úÇ –†–∞–∑–±–∏—Ç—å PDF", callback_data=f"split|{file_path}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# --- –ö–Ω–æ–ø–∫–∏ ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, file_path = query.data.split("|", maxsplit=1)

    if action == "to_txt":
        await query.edit_message_text("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ —Ç–µ–∫—Å—Ç...")
        text = extract_text(file_path)
        txt_path = file_path.replace(".pdf", ".txt")
        with open(txt_path, "w", encoding="utf-8") as f:
            f.write(text)
        await query.edit_message_text(f"‚úÖ TXT –≥–æ—Ç–æ–≤! –§–∞–π–ª: {txt_path}")
    elif action == "ocr":
        await query.edit_message_text("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR...")
        images = convert_from_path(file_path)
        text = ""
        for img in images:
            text += pytesseract.image_to_string(img)
        txt_path = file_path.replace(".pdf", "_ocr.txt")
        with open(txt_path, "w", encoding="utf-8") as f:
            f.write(text)
        await query.edit_message_text(f"‚úÖ OCR –∑–∞–≤–µ—Ä—à—ë–Ω! –§–∞–π–ª: {txt_path}")
    elif action == "split":
        await query.edit_message_text("‚úÇ –†–∞–∑–±–∏–≤–∞—é PDF...")
        reader = PdfReader(file_path)
        for i, page in enumerate(reader.pages):
            writer = PdfReader()
            writer.add_page(page)
            split_path = file_path.replace(".pdf", f"_page_{i+1}.pdf")
            with open(split_path, "wb") as f:
                writer.write(f)
        await query.edit_message_text("‚úÖ PDF —Ä–∞–∑–±–∏—Ç!")

# --- Webhook –¥–ª—è FastAPI ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook...")
    await telegram_app.bot.set_webhook(WEBHOOK_URL + "/webhook")
    yield
    logger.info("üõë –£–¥–∞–ª—è—é webhook...")
    await telegram_app.bot.delete_webhook()

app = FastAPI(lifespan=lifespan)

@app.post("/webhook")
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return JSONResponse(content={"ok": False}, status_code=500)
    return JSONResponse(content={"ok": True})

@app.get("/")
async def root():
    return {"status": "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Document.PDF, handle_document))
telegram_app.add_handler(CallbackQueryHandler(button_callback))
